"""
Parses the message format generated by the TCC interpreter
"""

## @package tops.sdss3.tcc.message
# Parses the message format generated by the TCC interpreter
#
# @author David Kirkby, dkirkby@uci.edu
# @date Created 23-Sep-2008
#
# This project is hosted at http://tops.googlecode.com/

import re

## Primitive patterns defined without any capturing groups
patterns = {
	'unsigned':		'0|[1-9][0-9]*',
	'hex':			'0x[0-9a-f]+',
	'float':		'[-+]?[0-9]*(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?',
	'string':		r'"(?:[^"\\]|\\.)*"',
	'pname':		'[A-Za-z_]+'
}

# Compound patterns defined without any capturing groups:

# A hex or decimal number
patterns['number'] = '(?:%(hex)s)|(?:%(float)s)' % patterns

# - An array of one or more numbers separated by commas.
patterns['array'] = '%(number)s(?:\s*,\s*%(number)s)*' % patterns

# - A parameter value is either an array or a string
patterns['pvalue'] = '(?:%(array)s)|(?:%(string)s)' % patterns

# - A parameter assignment
patterns['passign'] = '%(pname)s\s*=\s*%(pvalue)s' % patterns


import unittest

class MessageTests(unittest.TestCase):

	def check(self,p,text,valid):
		m = p.match(text)
		matched = m and m.end() == len(text)
		if valid and not matched:
			raise Exception("'%s' does not match '%s'" % (text,p.pattern))
		elif not valid and matched:
			raise Exception("'%s' should not match '%s'" % (text,p.pattern))

	def test00(self):
		"""Valid unsigned integers"""
		p = re.compile("%(unsigned)s$" % patterns)
		for text in ['0','1','12','120','102']:
			self.check(p,text,True)

	def test01(self):
		"""Invalid unsigned integers"""
		p = re.compile("%(unsigned)s$" % patterns)
		for text in ['abc','00','01','001','-1','-0']:
			self.check(p,text,False)

	def test02(self):
		"""Valid floating-point numbers"""
		p = re.compile("%(float)s$" % patterns)
		for text in [
			'0','1','12','120','102','1.','-1','-1.','0.23','1e1','1e-1','-1e+1','.2','-.2'
		]:
			self.check(p,text,True)

	def test03(self):
		"""Invalid floating-point numbers"""
		p = re.compile("%(float)s$" % patterns)
		for text in ['abc','0e','e0','1.2.3','1e-+2','+1-2']:
			self.check(p,text,False)

	def test04(self):
		"""Valid double-quoted string literals"""
		p = re.compile("%(string)s$" % patterns)
		for text in ['""','"a"','"abc"','";"']:
			self.check(p,text,True)

	def test05(self):
		"""Invalid double-quoted string literals"""
		p = re.compile("%(string)s$" % patterns)
		for text in ["'abc'",'abc','"a"bc','ab"c"']:
			self.check(p,text,False)

	def test06(self):
		"""Valid array of numeric values"""
		p = re.compile("%(array)s$" % patterns)
		for text in ['1.2','1.2,3.4','0','0xdeadbeef','0x123 ,-1.23']:
			self.check(p,text,True)

	def test07(self):
		"""Invalid array of numeric values"""
		p = re.compile("%(array)s$" % patterns)
		for text in ['1.2,',',1.2','1.2,3.4,']:
			self.check(p,text,False)

	def test08(self):
		"""Valid parameter assignment"""
		p = re.compile("%(passign)s$" % patterns)
		for text in [
			'Text="827800 packets sent successfully"',
			'UT1=  4728232973.56',
			'AzStat=121.000050, 0.000000, 4728233002.17664, 0x00003800'
			#,
			#'BadRotStatus'
		]:
			self.check(p,text,True)

	def test09(self):
		"""Invalid parameter assignment"""
		p = re.compile("%(passign)s$" % patterns)
		for text in ['1.2,',',1.2','1.2,3.4,']:
			self.check(p,text,False)

if __name__ == '__main__':
	unittest.main()
